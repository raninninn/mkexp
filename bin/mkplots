#!/usr/bin/env Rscript
options(show.error.locations = TRUE)
options(error = traceback)

# Install and load required libraries
libs <- c("cli", "ggplot2", "plyr", "dplyr", "tidyr", "RColorBrewer", "gridExtra", "egg")
for (lib in libs) {
  if (!require(lib, character.only = TRUE, warn.conflicts = FALSE, quietly = TRUE)) {
    install.packages(lib, repos = 'https://cran.uni-muenster.de/')
  }

  library(lib, character.only = TRUE, quietly = TRUE)
}

# Load plotting functions
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)

# Load script plots
load_script <- function(name)
  source(file.path(script.basename, "../plots/", name), chdir = TRUE)

load_script("performance_profile_plot.R")
load_script("running_time_box_plot.R")

# Load statistics of known graphs
graphs_db <- read.csv(file.path(script.basename, "../data/clustering_dimacs10.csv"), header = TRUE, sep = ",") |> dplyr::distinct()

# Create directory for the plots
if (!dir.exists("plots")) {
  dir.create("plots")
}

# Read CLI arguments to decide on which algorithms to include and which plots to use
algorithms <- c()
plots <- c()
ignore_balance <- FALSE
filter_eps <- 0.00
filter_k <- 0
filename_suffix <- ""

for (arg in commandArgs(trailingOnly = TRUE)) {
  if (!startsWith(arg, "--")) {
    algorithms <- c(algorithms, arg)
  } else if (startsWith(arg, "--graph-suffix")) {
    suffix <- substring(arg, nchar("--graph-suffix=") + 1)
    graphs_db <- graphs_db %>% dplyr::mutate(Graph = paste0(Graph, suffix))
  } else if (arg == "--ignore-balance") {
    ignore_balance <- TRUE
  } else if (startsWith(arg, "--filter-eps")) {
    filter_eps <- substring(arg, nchar("--filter-eps=") + 1)
  } else if (startsWith(arg, "--filter-k")) {
    filter_k <- substring(arg, nchar("--filter-k=") + 1)
  } else if (startsWith(arg, "--suffix")) {
    filename_suffix <- substring(arg, nchar("--suffix=") + 1)
  } else {
    plots <- c(plots, arg)
  }
}

cat(paste0("Filter epsilon? ", ifelse(filter_eps == 0.0, "No", paste0("Yes: eps == ", filter_eps)), "\n"))
cat(paste0("Filter k? ", ifelse(filter_k == 0, "No", paste0("Yes: k == ", filter_k)), "\n"))
cat(paste0("File suffix: ", filename_suffix, "\n"))
cat("\n")

all_plots <- c(
  "--all-cut", "--pairwise-cut", "--per-k-cut", "--per-eps-cut", "--per-graph-type-cut",
  "--all-time",
  "--per-instance",
  "--graph-stats"
)
default_plots <- c("--all-cut", "--all-time", "--per-instance")

if (length(algorithms) == 0 || "--help" %in% plots) {
  cat("Usage: mkplots [options...] [plots...] algorithms...\n\n")
  cat("Available options:\n")
  cat("\t--filter-eps=<...>    Only use results with the given epsilon value.\n")
  cat("\t--filter-k=<...>      Only use results with the given number of blocks.\n")
  cat("\t--suffix=<...>        Append this suffix to the filenames of plot files.\n")
  cat("\t--graph-suffix=<...>  Append this suffix to the graph names in 'data/graphs.csv' before merging.\n")
  cat("\n")
  cat(paste0("Available plots:", "\n\t", paste(all_plots, collapse = "\n\t"), "\n\n"))
  cat(paste0("Default plots (if none are specified):", "\n\t", paste(default_plots, collapse = "\n\t"), "\n\n"))
  cat("Example: mkplots --all-cut --per-k-cut Algo1 Algo2\n")
  quit()
}

# If there are no picks for plots, build some default plots ...
if (length(plots) == 0) {
  plots <- default_plots
}

if (length(algorithms) == 0) {
  cat("No algorithms specified.\n")
  cat("Usage: mkplots [plots...] algorithms...\n")
  quit()
}

# Load result file for each algorithm
data <- list()

for (algorithm in algorithms) {
  filename <- paste0("results/", algorithm, ".csv")
  if (!file.exists(filename)) {
    cat("Error: no such file:", filename, "\n")
    quit()
  }

  df <- load_data(algorithm, filename, ignore_balance = ignore_balance) %>%
    dplyr::mutate(Algorithm = paste0(Algorithm, "-", NumThreadsPerMPI)) %>%
    merge(graphs_db, by = "Graph", all.x = TRUE, suffixes = c(".csv", ""))

  if (filter_eps > 0) {
    df <- df %>% dplyr::filter(Epsilon == filter_eps)
  }
  if (filter_k > 0) {
    df <- df %>% dplyr::filter(K == filter_k)
  }

  # Very rough classification as regular / irregular graph
  df <- df %>% dplyr::mutate(GraphType = ifelse(MaxDeg / AvgDeg > 50 | MaxDeg > 2000, "Irregular", "Regular"))

  my_num_threads <- unique(df$NumThreadsPerMPI)
  my_ks <- unique(df$K)
  my_graphs <- unique(df$Graph)
  my_eps <- unique(df$Epsilon)

  cat(paste0("\tthreads = { ", paste(my_num_threads, collapse = ", "), " }\n"))
  cat(paste0("\tks = { ", paste(my_ks, collapse = ", "), " }\n"))
  cat(paste0("\teps = { ", paste(my_eps, collapse = ", "), " }\n"))
  cat(paste0("\t#graphs = ", length(my_graphs), "\n"))

  # Split dataset into one algorithm for each thread count
  for (num_threads in unique(df$NumThreadsPerMPI)) {
    thread_df <- df %>% dplyr::filter(NumThreadsPerMPI == num_threads)
    data <- append(data, list(thread_df))
  }
}

cat("\n")
cat("Determining common instances among data sets:\n")
common_ks <- sort(unique(data[[1]]$K))
common_graphs <- unique(data[[1]]$Graph)
common_eps <- unique(data[[1]]$Epsilon)
for (i in 1:length(data)) {
  name <- data[[i]]$Algorithm[[1]]
  my_ks <- unique(data[[i]]$K)
  my_graphs <- unique(data[[i]]$Graph)
  my_eps <- unique(data[[i]]$Epsilon)

  common_ks <- intersect(common_ks, my_ks)
  common_graphs <- intersect(common_graphs, my_graphs)
  common_eps <- intersect(common_eps, my_eps)

  cat(paste0(
    "\tAlgorithm ", name, ": ",
    "#graphs = ", length(my_graphs), " (-> ", length(common_graphs), "), ",
    "#ks = ", length(my_ks), " (-> ", length(common_ks), "), ",
    "#eps = ", length(my_eps), " (-> ", length(common_eps), ")",
    "\n"
  ))
}

common_graph_types <- sort(unique(data[[1]]$GraphType))

cat(paste0(
  "Common instances: ",
  "#graphs = ", length(common_graphs), ", ",
  "#ks = ", length(common_ks), ", ",
  "#eps = ", length(common_eps), ", ",
  "#graph types = ", length(common_graph_types),
  "\n"
))
cat(paste0("\tks = { ", paste0(common_ks, collapse = ", "), " }\n"))
cat(paste0("\teps = { ", paste0(common_eps, collapse = ", "), "  }\n"))
cat(paste0("\tgraph types = { ", paste0(common_graph_types, collapse = ", "), " }\n"))
cat("\n")

# Filter for common graphs and K's
for (i in 1:length(data)) {
  data[[i]] <- data[[i]] %>% dplyr::filter(
    Graph %in% common_graphs &
      K %in% common_ks &
      Epsilon %in% common_eps
  )
}

cut_plot_theme <- create_theme() + theme(
  legend.position = "bottom"
)

mkpdf <- function(name) pdf(paste0("plots/", name, filename_suffix, ".pdf"))

if ("--all-cut" %in% plots) {
  mkpdf("cut")
  plot <- do.call(create_performance_profile, data) +
    theme_bw() +
    cut_plot_theme +
    labs(
      title = "Edge Cut Comparison over All Instances",
      subtitle = paste0("k = { ", paste(common_ks, collapse = ", "), " }"),
      caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks), ", #eps = ", length(common_eps))
    )
  print(plot)
  dev.off()
}

if ("--per-k-cut" %in% plots) {
  mkpdf("per_k_cut")
  for (k in common_ks) {
    k_data <- list()
    for (df in data) {
      k_df <- df %>% dplyr::filter(K == k)
      k_data <- append(k_data, list(k_df))
    }

    plot <- do.call(create_performance_profile, k_data) +
      theme_bw() +
      cut_plot_theme +
      labs(
        title = paste0("Edge Cut Comparison for k = ", k),
        caption = paste0("#graphs = ", length(common_graphs), ", #ks = 1, #eps = ", length(common_eps))
      )
    print(plot)
  }
  dev.off()
}

if ("--per-eps-cut" %in% plots) {
  mkpdf("per_eps_cut")
  for (eps in common_eps) {
    eps_data <- list()
    for (df in data) {
      eps_df <- df %>% dplyr::filter(Epsilon == eps)
      eps_data <- append(eps_data, list(eps_df))
    }

    plot <- do.call(create_performance_profile, eps_data) +
      theme_bw() +
      cut_plot_theme +
      labs(
        title = paste0("Edge Cut Comparison for eps = ", 100.0 * eps, "%"),
        caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks), ", #eps = 1")
      )
    print(plot)
  }
  dev.off()
}

if ("--per-graph-type-cut" %in% plots) {
  mkpdf("per_graph_type_cut")
  for (type in common_graph_types) {
    type_data <- list()
    for (df in data) {
      type_df <- df %>% dplyr::filter(GraphType == type)
      type_data <- append(type_data, list(type_df))
    }

    type_graphs <- unique(type_data[[1]]$Graph)

    plot <- do.call(create_performance_profile, type_data) +
      theme_bw() +
      cut_plot_theme +
      labs(
        title = paste0("Edge Cut Comparison for ", type, " Graphs"),
        caption = paste0("#graphs=", length(type_graphs), ", k={", paste(common_ks, collapse = ","), "}, eps={", paste(common_eps, collapse = ","), "}")
      )
    print(plot)
  }
  dev.off()
}

aggregate_running_times <- function(dfs) {
  times <- data.frame(Algorithm = factor(), Gmean = numeric(), Hmean = numeric(), Mean = numeric())
  for (df in dfs) {
    times <- rbind(times, data.frame(
      Algorithm = df$Algorithm[[1]],
      Gmean = gm_mean(df$AvgTime),
      Hmean = hm_mean(df$AvgTime),
      Mean = mean(df$AvgTime)
    ))
  }
  return(times)
}

# Pairwise performance profiles
if ("--pairwise-cut" %in% plots) {
  mkpdf("pairwise_cut")
  for (i in 1:(length(data) - 1)) {
    for (j in (i + 1):length(data)) {
      pp <- create_performance_profile(data[[i]], data[[j]]) +
        theme_bw() +
        create_theme() +
        labs(
          title = "Pairwise Edge Cut Comparison over All Instances",
          subtitle = paste0("k = { ", paste(common_ks, collapse = ", "), " }"),
          caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks))
        )
      print(pp)
    }
  }
  dev.off()
}

if ("--all-time" %in% plots) {
  running_time_plot_theme <- create_theme() + theme(
    legend.position = "none",
    axis.title.x = element_blank(),
  )

  mkpdf("running_time")
  all_running_times <- aggregate_running_times(data)
  all_running_times_annotation <- data.frame(
    Algorithm = all_running_times$Algorithm,
    Annotation = sprintf("h=%.2f, g=%.2f, a=%.2f", all_running_times$Hmean, all_running_times$Gmean, all_running_times$Mean)
  )

  plot <- do.call(create_running_time_boxplot, c(data, list(annotation = all_running_times_annotation))) +
    theme_bw() +
    running_time_plot_theme +
    labs(
      title = "Total Running Times over All Instances",
      subtitle = paste0("k = { ", paste(common_ks, collapse = ", "), " }"),
      caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks))
    )
  print(plot)

  for (k in common_ks) {
    k_data <- list()
    for (df in data) {
      k_df <- df %>% dplyr::filter(K == k)
      k_data <- append(k_data, list(k_df))
    }

    k_running_times <- aggregate_running_times(k_data)
    k_running_times_annotation <- data.frame(
      Algorithm = k_running_times$Algorithm,
      Annotation = sprintf("h=%.2f, g=%.2f, a=%.2f", k_running_times$Hmean, k_running_times$Gmean, k_running_times$Mean)
    )

    plot <- do.call(create_running_time_boxplot, c(k_data, list(annotation = k_running_times_annotation))) +
      theme_bw() +
      running_time_plot_theme +
      labs(
        title = paste0("Total Running Times for k = ", k),
        caption = paste0("#graphs = ", length(common_graphs), ", #ks = 1")
      )
    print(plot)
  }

  dev.off()
}

if ("--per-instance" %in% plots) {
  side_len <- round(sqrt(length(common_graphs)))
  relative_to <- data[[1]]

  normalized <- data.frame()
  for (df in data) {
    df$RelAvgTime <- df$AvgTime / relative_to$AvgTime
    df$RelAvgCut <- df$AvgCut / relative_to$AvgCut
    normalized <- rbind(normalized, df)
  }

  normalized <- normalized %>%
    dplyr::mutate(K = factor(K)) %>%
    dplyr::mutate(Title = paste0(Graph, " (", MaxDeg, ")")) %>%
    dplyr::mutate(MaxDegToM = MaxDeg / M)

  normalized$Title <- factor(
    normalized$Title,
    levels = unique(normalized$Title[order(normalized$MaxDeg, decreasing = TRUE)])
  )

  mkpdf("per_instance")

  # Cuts
  plot <- ggplot(normalized, aes(x = K, y = RelAvgCut, fill = Algorithm)) +
    geom_bar(
      stat = "identity",
      position = position_dodge()
    ) +
    ylab("Relative Cut") +
    xlab("Number of Blocks") +
    theme_bw() +
    facet_wrap(~Title, ncol = side_len, scales = "free") +
    geom_hline(yintercept = 1) +
    create_theme_facet() +
    theme(legend.position = "bottom") +
    labs(
      title = "Cuts",
      subtitle = "Per Instance, Relative to the First Algorithm, Lower is Better",
      caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks))
    )
  print(plot)

  # Running time
  p <- ggplot(normalized, aes(x = K, y = RelAvgTime, fill = Algorithm)) +
    geom_bar(
      stat = "identity",
      position = position_dodge()
    ) +
    ylab("Relative Time") +
    xlab("Number of Blocks") +
    theme_bw() +
    facet_wrap(~Title, ncol = side_len, scales = "free") +
    geom_hline(yintercept = 1) +
    create_theme_facet() +
    theme(legend.position = "bottom") +
    labs(
      title = "Running Times",
      subtitle = "Per Instance, Relative to the First Algorithm, Lower is Better",
      caption = paste0("#graphs = ", length(common_graphs), ", #ks = ", length(common_ks))
    )
  print(p)

  dev.off()
}

if ("--ss" %in% plots) {
  pdf("ss.pdf", width = 14, height = 3)
  p <- ggplot(all_data, aes(x = NumPEs, y = AvgTime)) +
    ggtitle("Strong scaling") +
    geom_line() +
    ylab("Running time") +
    xlab("Number of PEs") +
    theme_bw() +
    scale_x_continuous(trans = "log2", breaks = unique(all_data$NumPEs)) +
    facet_wrap(~Graph, ncol = 4, scales = "free") +
    create_theme_facet() +
    theme(legend.position = "right")
  print(p)
  dev.off()
}

if ("--graph-stats" %in% plots) {
  cat("Graphs included in the benchmark set:\n\n")
  graphs <- data[[1]] %>%
    dplyr::distinct(Graph, GraphType, N, M, AvgDeg, MaxDeg)
  print(graphs, width = 120)
  cat("\n")

  regular <- graphs %>% dplyr::filter(GraphType == "Regular")
  irregular <- graphs %>% dplyr::filter(GraphType == "Irregular")

  cat("#graphs:", nrow(graphs), "\n")
  cat("#regular graphs:", nrow(regular), "\n")
  cat("#irregular graphs:", nrow(irregular), "\n")
}

if ("--cuts-per-pq" %in% plots) {
  relative_to <- data[[1]]
  normalized <- data.frame()
  for (df in data) {
    df$RelAvgTime <- df$AvgTime / relative_to$AvgTime
    df$RelAvgCut <- df$AvgCut / relative_to$AvgCut
    df$node2vec.p <- as.factor(df$node2vec.p)
    df$node2vec.q <- as.factor(df$node2vec.q)
    normalized <- rbind(normalized, df)
  }

  normalized <- normalized %>%
    dplyr::mutate(K = factor(K)) %>%
    dplyr::mutate(Title = paste0(Graph, " (", MaxDeg, ")")) %>%
    dplyr::mutate(MaxDegToM = MaxDeg / M)

  normalized$Title <- factor(
    normalized$Title,
    levels = unique(normalized$Title[order(normalized$MaxDeg, decreasing = TRUE)])
  )
  
  normalized <- normalized %>% dplyr::filter(Invalid == FALSE)
  print(normalized)
  mkpdf("per_pq_cut")
  for (graph in common_graphs) {
    for (k in common_ks) {
      dataseg <- normalized %>% dplyr::filter(Graph == graph & K == k)
      edgew <- dataseg$M[1]
      print(dataseg$M)
      if (graph == "lesmis") {
        edgew <- 1640
      } else if (graph == "celegansneural") {
        edgew <- 17638
      }
      plot <- ggplot(dataseg, aes(node2vec.p, node2vec.q, fill = AvgCut)) +
        geom_tile() +
        theme_bw() +
        labs(
          title = paste0("Edge Cuts for ", graph, ", k: ", k),
          subtitle = paste0("Total edge weight ", edgew)
        )
      print(plot)
    }
  }
  dev.off()
} 
